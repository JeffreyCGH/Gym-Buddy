type Message @aws_api_key @aws_iam {
  id: ID!
  chat: String!
  sender: String!
  text: String!
  timestamp: AWSDateTime!
  relatedChat: Chat
  senderProfile: UserProfile
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  messageRelatedChatId: ID
  messageSenderProfileId: ID
}

type Chat @aws_api_key @aws_iam {
  id: ID!
  lastMessageTimestamp: AWSTimestamp
  user1: String
  user1Profile: UserProfile
  user2: String
  user2Profile: UserProfile
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  chatUser1ProfileId: ID
  chatUser2ProfileId: ID
}

enum WORKOUTTYPE {
  POWERLIFTING
  BODYBUILDING
  CARDIO
  RECREATIONAL_SPORTS
  GENERAL_FITNESS
}

type UserProfile @aws_api_key @aws_iam {
  id: ID!
  email: String!
  gender: String
  age: Int
  experience: String
  workoutDays: [String]
  profilePicure: String
  WorkoutType: WORKOUTTYPE
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelMessageConnection @aws_api_key @aws_iam {
  items: [Message]!
  nextToken: String
}

input ModelMessageFilterInput {
  id: ModelIDInput
  chat: ModelStringInput
  sender: ModelStringInput
  text: ModelStringInput
  timestamp: ModelStringInput
  and: [ModelMessageFilterInput]
  or: [ModelMessageFilterInput]
  not: ModelMessageFilterInput
  messageRelatedChatId: ModelIDInput
  messageSenderProfileId: ModelIDInput
}

type Query {
  getMessage(id: ID!): Message @aws_api_key @aws_iam
  listMessages(filter: ModelMessageFilterInput, limit: Int, nextToken: String): ModelMessageConnection @aws_api_key @aws_iam
  getChat(id: ID!): Chat @aws_api_key @aws_iam
  listChats(filter: ModelChatFilterInput, limit: Int, nextToken: String): ModelChatConnection @aws_api_key @aws_iam
  getUserProfile(id: ID!): UserProfile @aws_api_key @aws_iam
  listUserProfiles(filter: ModelUserProfileFilterInput, limit: Int, nextToken: String): ModelUserProfileConnection @aws_api_key @aws_iam
}

input ModelMessageConditionInput {
  chat: ModelStringInput
  sender: ModelStringInput
  text: ModelStringInput
  timestamp: ModelStringInput
  and: [ModelMessageConditionInput]
  or: [ModelMessageConditionInput]
  not: ModelMessageConditionInput
  messageRelatedChatId: ModelIDInput
  messageSenderProfileId: ModelIDInput
}

input CreateMessageInput {
  id: ID
  chat: String!
  sender: String!
  text: String!
  timestamp: AWSDateTime!
  messageRelatedChatId: ID
  messageSenderProfileId: ID
}

input UpdateMessageInput {
  id: ID!
  chat: String
  sender: String
  text: String
  timestamp: AWSDateTime
  messageRelatedChatId: ID
  messageSenderProfileId: ID
}

input DeleteMessageInput {
  id: ID!
}

type Mutation {
  createMessage(input: CreateMessageInput!, condition: ModelMessageConditionInput): Message @aws_api_key @aws_iam
  updateMessage(input: UpdateMessageInput!, condition: ModelMessageConditionInput): Message @aws_api_key @aws_iam
  deleteMessage(input: DeleteMessageInput!, condition: ModelMessageConditionInput): Message @aws_api_key @aws_iam
  createChat(input: CreateChatInput!, condition: ModelChatConditionInput): Chat @aws_api_key @aws_iam
  updateChat(input: UpdateChatInput!, condition: ModelChatConditionInput): Chat @aws_api_key @aws_iam
  deleteChat(input: DeleteChatInput!, condition: ModelChatConditionInput): Chat @aws_api_key @aws_iam
  createUserProfile(input: CreateUserProfileInput!, condition: ModelUserProfileConditionInput): UserProfile @aws_api_key @aws_iam
  updateUserProfile(input: UpdateUserProfileInput!, condition: ModelUserProfileConditionInput): UserProfile @aws_api_key @aws_iam
  deleteUserProfile(input: DeleteUserProfileInput!, condition: ModelUserProfileConditionInput): UserProfile @aws_api_key @aws_iam
}

input ModelSubscriptionMessageFilterInput {
  id: ModelSubscriptionIDInput
  chat: ModelSubscriptionStringInput
  sender: ModelSubscriptionStringInput
  text: ModelSubscriptionStringInput
  timestamp: ModelSubscriptionStringInput
  and: [ModelSubscriptionMessageFilterInput]
  or: [ModelSubscriptionMessageFilterInput]
}

type Subscription {
  onCreateMessage(filter: ModelSubscriptionMessageFilterInput): Message @aws_subscribe(mutations: ["createMessage"]) @aws_api_key @aws_iam
  onUpdateMessage(filter: ModelSubscriptionMessageFilterInput): Message @aws_subscribe(mutations: ["updateMessage"]) @aws_api_key @aws_iam
  onDeleteMessage(filter: ModelSubscriptionMessageFilterInput): Message @aws_subscribe(mutations: ["deleteMessage"]) @aws_api_key @aws_iam
  onCreateChat(filter: ModelSubscriptionChatFilterInput): Chat @aws_subscribe(mutations: ["createChat"]) @aws_api_key @aws_iam
  onUpdateChat(filter: ModelSubscriptionChatFilterInput): Chat @aws_subscribe(mutations: ["updateChat"]) @aws_api_key @aws_iam
  onDeleteChat(filter: ModelSubscriptionChatFilterInput): Chat @aws_subscribe(mutations: ["deleteChat"]) @aws_api_key @aws_iam
  onCreateUserProfile(filter: ModelSubscriptionUserProfileFilterInput): UserProfile @aws_subscribe(mutations: ["createUserProfile"]) @aws_api_key @aws_iam
  onUpdateUserProfile(filter: ModelSubscriptionUserProfileFilterInput): UserProfile @aws_subscribe(mutations: ["updateUserProfile"]) @aws_api_key @aws_iam
  onDeleteUserProfile(filter: ModelSubscriptionUserProfileFilterInput): UserProfile @aws_subscribe(mutations: ["deleteUserProfile"]) @aws_api_key @aws_iam
}

type ModelChatConnection @aws_api_key @aws_iam {
  items: [Chat]!
  nextToken: String
}

input ModelChatFilterInput {
  id: ModelIDInput
  lastMessageTimestamp: ModelIntInput
  user1: ModelStringInput
  user2: ModelStringInput
  and: [ModelChatFilterInput]
  or: [ModelChatFilterInput]
  not: ModelChatFilterInput
  chatUser1ProfileId: ModelIDInput
  chatUser2ProfileId: ModelIDInput
}

input ModelChatConditionInput {
  lastMessageTimestamp: ModelIntInput
  user1: ModelStringInput
  user2: ModelStringInput
  and: [ModelChatConditionInput]
  or: [ModelChatConditionInput]
  not: ModelChatConditionInput
  chatUser1ProfileId: ModelIDInput
  chatUser2ProfileId: ModelIDInput
}

input CreateChatInput {
  id: ID
  lastMessageTimestamp: AWSTimestamp
  user1: String
  user2: String
  chatUser1ProfileId: ID
  chatUser2ProfileId: ID
}

input UpdateChatInput {
  id: ID!
  lastMessageTimestamp: AWSTimestamp
  user1: String
  user2: String
  chatUser1ProfileId: ID
  chatUser2ProfileId: ID
}

input DeleteChatInput {
  id: ID!
}

input ModelSubscriptionChatFilterInput {
  id: ModelSubscriptionIDInput
  lastMessageTimestamp: ModelSubscriptionIntInput
  user1: ModelSubscriptionStringInput
  user2: ModelSubscriptionStringInput
  and: [ModelSubscriptionChatFilterInput]
  or: [ModelSubscriptionChatFilterInput]
}

type ModelUserProfileConnection @aws_api_key @aws_iam {
  items: [UserProfile]!
  nextToken: String
}

input ModelWORKOUTTYPEInput {
  eq: WORKOUTTYPE
  ne: WORKOUTTYPE
}

input ModelUserProfileFilterInput {
  id: ModelIDInput
  email: ModelStringInput
  gender: ModelStringInput
  age: ModelIntInput
  experience: ModelStringInput
  workoutDays: ModelStringInput
  profilePicure: ModelStringInput
  WorkoutType: ModelWORKOUTTYPEInput
  and: [ModelUserProfileFilterInput]
  or: [ModelUserProfileFilterInput]
  not: ModelUserProfileFilterInput
}

input ModelUserProfileConditionInput {
  email: ModelStringInput
  gender: ModelStringInput
  age: ModelIntInput
  experience: ModelStringInput
  workoutDays: ModelStringInput
  profilePicure: ModelStringInput
  WorkoutType: ModelWORKOUTTYPEInput
  and: [ModelUserProfileConditionInput]
  or: [ModelUserProfileConditionInput]
  not: ModelUserProfileConditionInput
}

input CreateUserProfileInput {
  id: ID
  email: String!
  gender: String
  age: Int
  experience: String
  workoutDays: [String]
  profilePicure: String
  WorkoutType: WORKOUTTYPE
}

input UpdateUserProfileInput {
  id: ID!
  email: String
  gender: String
  age: Int
  experience: String
  workoutDays: [String]
  profilePicure: String
  WorkoutType: WORKOUTTYPE
}

input DeleteUserProfileInput {
  id: ID!
}

input ModelSubscriptionUserProfileFilterInput {
  id: ModelSubscriptionIDInput
  email: ModelSubscriptionStringInput
  gender: ModelSubscriptionStringInput
  age: ModelSubscriptionIntInput
  experience: ModelSubscriptionStringInput
  workoutDays: ModelSubscriptionStringInput
  profilePicure: ModelSubscriptionStringInput
  WorkoutType: ModelSubscriptionStringInput
  and: [ModelSubscriptionUserProfileFilterInput]
  or: [ModelSubscriptionUserProfileFilterInput]
}
