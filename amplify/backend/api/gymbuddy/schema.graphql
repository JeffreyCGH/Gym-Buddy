type User 
    @model 
    @auth(rules: [{ allow: owner, operations: [create, read, update, delete] }])
{
    id: ID! @primaryKey
    email: String!
    name: String
    age: Int
    gender: String
    experience: String
    profilePicture: String
    workoutDays: [UserWorkoutDay] @hasMany(fields: ["id"])
    chatsInitiated: [Chat] @hasMany(fields: ["user1Id"])
    chatsReceived: [Chat] @hasMany(fields: ["user2Id"])
}

type WorkoutDay 
    @model 
    @auth(rules: [{ allow: owner, operations: [create, read, update, delete] }])
{
    id: ID! @primaryKey
    dayName: String!
    users: [UserWorkoutDay] @hasMany(fields: ["workoutDayId"])
}

type UserWorkoutDay 
    @model 
    @auth(rules: [{ allow: owner, operations: [create, read, update, delete] }])
{
    id: ID! @primaryKey
    userId: ID!
    workoutDayId: ID!
    user: User @belongsTo(fields: ["userId"])
    workoutDay: WorkoutDay @belongsTo(fields: ["workoutDayId"])
}

type Chat 
    @model 
    @auth(rules: [{ allow: owner, operations: [create, read, update, delete] }])
{
    id: ID! @primaryKey
    user1Id: ID!
    user2Id: ID!
    user1: User @belongsTo(fields: ["user1Id"])
    user2: User @belongsTo(fields: ["user2Id"])
    messages: [Message] @hasMany(fields: ["chatId"])
}

type Message 
    @model 
    @auth(rules: [{ allow: owner, operations: [create, read, update, delete] }])
{
    id: ID! @primaryKey
    chatId: ID!
    senderId: ID!
    content: String
    timestamp: AWSDateTime!
    chat: Chat @belongsTo(fields: ["chatId"])
}
