type User 
    @model 
    @auth(rules: [{ allow: owner, operations: [create, read, update, delete] }])
{
    id: ID!
    email: String!
    name: String
    age: Int
    gender: String
    experience: String
    profilePicture: String
    workoutDays: [UserWorkoutDay] @connection(keyName: "byUser", fields: ["id"])
    chatsInitiated: [Chat] @connection(name: "UserChats1")
    chatsReceived: [Chat] @connection(name: "UserChats2")
}

type WorkoutDay 
    @model 
    @auth(rules: [{ allow: owner, operations: [create, read, update, delete] }])
{
    id: ID!
    dayName: String!
    users: [UserWorkoutDay] @connection(keyName: "byWorkoutDay", fields: ["id"])
}

type UserWorkoutDay 
    @model 
    @key(name: "byUser", fields: ["userId"])
    @key(name: "byWorkoutDay", fields: ["workoutDayId"])
    @auth(rules: [{ allow: owner, operations: [create, read, update, delete] }])
{
    id: ID!
    userId: ID!
    workoutDayId: ID!
}

type Chat 
    @model 
    @auth(rules: [{ allow: owner, operations: [create, read, update, delete] }])
{
    id: ID!
    user1ID: ID! @connection(name: "UserChats1")
    user2ID: ID! @connection(name: "UserChats2")
    messages: [Message] @connection(keyName: "byChat", fields: ["id"])
}

type Message 
    @model 
    @key(name: "byChat", fields: ["chatId"])
    @auth(rules: [{ allow: owner, operations: [create, read, update, delete] }])
{
    id: ID!
    chatId: ID!
    senderId: ID!
    content: String
    timestamp: AWSDateTime!
}
